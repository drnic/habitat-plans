#!/bin/bash

PIPELINE=$(cd $(dirname ${BASH_SOURCE[0]}) ; pwd)
hab_origin=starkandwayne

pushd $PIPELINE >/dev/null
  rm -rf packages
  mkdir packages deps
  for package in $(find .. -d -maxdepth 1); do
    if [[ -f ${package}/plan.sh ]]; then
      package_name=$(basename ${package})
      source ${package}/plan.sh

      for dep in "${pkg_deps[@]}"; do
        version=""
        version_key=""
        dep_origin=$(dirname ${dep})
        dep_name=$(basename ${dep})

        if [[ $(dirname ${dep_origin}) != "." ]]; then
          version_entry="    version: ${dep_name}"
          version="-${dep_name}"
          dep_name="$(basename ${dep_origin})"
          dep_origin=$(dirname ${dep_origin})
        fi

        cat > deps/${package_name}-${dep_origin}-${dep_name}${version}-dep.yml <<EOF
jobs:
- name: build-${package_name}
  plan:
  - (( inline ))
  - aggregate:
    - (( append ))
    - {get: ${dep_origin}-${dep_name}${version}, trigger: true}

resources:
- name: ${dep_origin}-${dep_name}${version}
  type: hab-pkg
  source:
    origin: ${dep_origin}
    name: ${dep_name}
${version_entry}
EOF
      done
      cat > packages/${package_name}.yml <<EOF
---
groups:
- name: packages
  jobs:
  - (( append ))
  - build-${package_name}

jobs:
- name: build-${package_name}
  public: true
  plan:
  - (( append ))
  - {get: ${package_name}-plan, trigger: true}
  - {get: habitat-plans-ci}
  - task: build-${package_name}
    privileged: true
    config:
      platform: linux
      image: docker:///starkandwayne/habitat-plans-pipeline
      inputs:
      - name: ${package_name}-plan
      outputs:
      - name: result
      run:
        path: ./habitat-plans-ci/ci/scripts/build
      params:
        PACKAGE_CONTEXT: ${package_name}-plan/${package_name}
        OUT: result
        HAB_ORIGIN: ${hab_origin}
        PLAN_NAME: ${package_name}
        HAB_ORIGIN_KEY: (( grab meta.habitat.origin_key ))
  - aggregate:
    - put: ${hab_origin}-${package_name}-image
      params:
        load_file: result/${hab_origin}-${package_name}-docker.tar
        load_repository: ${hab_origin}/${package_name}
        load_tag: habitat
        tag: result/docker_tag
    - put: ${hab_origin}-${package_name}-edge-image
      params:
        load_file: result/${hab_origin}-${package_name}-docker.tar
        load_repository: ${hab_origin}/${package_name}
        load_tag: habitat
  - put: ${hab_origin}-${package_name}
    params:
      result: result

resources:
- name: ${hab_origin}-${package_name}
  type: hab-pkg
  source:
    origin: (( grab meta.habitat.origin ))
    name: ${package_name}
    auth_token: (( grab meta.habitat.auth_token ))

- name: ${package_name}-plan
  type: git
  source:
    uri: https://github.com/starkandwayne/habitat-plans.git
    paths: [${package_name}/*]

- name: ${hab_origin}-${package_name}-image
  type: docker-image
  source:
    email: (( grab meta.dockerhub.email ))
    username: (( grab meta.dockerhub.username ))
    password: (( grab meta.dockerhub.password ))
    repository: starkandwayne/${package_name}

- name: ${hab_origin}-${package_name}-edge-image
  type: docker-image
  source:
    email: (( grab meta.dockerhub.email ))
    username: (( grab meta.dockerhub.username ))
    password: (( grab meta.dockerhub.password ))
    repository: starkandwayne/${package_name}
    tag: "edge"
EOF
    fi
  done

  trap "rm -f ${PIPELINE}/.deploy.yml" INT QUIT TERM EXIT
  spruce merge base.yml deps/*.yml packages/*.yml > .deploy.yml  && \
    REDACT=yes spruce merge --prune meta base.yml deps/*.yml packages/*.yml > pipeline.yml && \
    fly --target sw set-pipeline --pipeline habitat-plans --config .deploy.yml     &&
    fly --target sw unpause-pipeline --pipeline habitat-plans

  rm -rf packages deps
popd >/dev/null
